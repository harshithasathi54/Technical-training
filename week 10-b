#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Create new node
struct Node* createNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

// Print linked list
void printList(struct Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Merge two sorted lists
struct Node* merge(struct Node* a, struct Node* b) {
    if (!a) return b;
    if (!b) return a;
    if (a->data < b->data) {
        a->next = merge(a->next, b);
        return a;
    } else {
        b->next = merge(a, b->next);
        return b;
    }
}

// Merge Sort function
struct Node* mergeSort(struct Node* head) {
    if (!head || !head->next) return head;

    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    struct Node* mid = slow->next;
    slow->next = NULL;

    struct Node* left = mergeSort(head);
    struct Node* right = mergeSort(mid);

    return merge(left, right);
}

int main() {
    int n, data;
    struct Node* head = NULL;
    struct Node* tail = NULL;

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter data: ");
        scanf("%d", &data);
        struct Node* node = createNode(data);
        if (!head) head = tail = node;
        else {
            tail->next = node;
            tail = node;
        }
    }

    printf("\nLinked list before sorting:\n");
    printList(head);

    head = mergeSort(head);

    printf("\nLinked list after merge sort:\n");
    printList(head);

    return 0;
}
